{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juan.villegas.munoz\\\\OneDrive - Accenture\\\\Desktop\\\\React\\\\05-hook-app\\\\src\\\\components\\\\03-examples\\\\MultipleCustomHooks.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useCounter } from '../../hook/useCounter';\nimport { useFetch } from '../../hook/useFetch';\nimport \"../02-useEffect/effects.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MultipleCustomHooks = () => {\n  _s();\n\n  /*  vamos a hacer uso de un contador para ir pasando de una frase a otra mediante el \r\n    indicador del id\r\n    mediante el useCounter.\r\n    vamos a desestructurar lo que retorna el useCounter con lo que nos interesa lo que seria en este caso\r\n    el counter y el increment\r\n  */\n  const {\n    counter,\n    increment\n  } = useCounter(1); //vamos a llamar a nuestro hooks useFetch el cual nos regresa state y lo guardamos en la const state\n\n  const state = useFetch(`https://www.breakingbadapi.com/api/quotes/${counter}`); //extraemos el loading del state\n\n  const {\n    loading\n  } = state; //ahora vamos a extraer la data que debemos hacerlo de la siguiente manera debido a que inicialmente data es null\n\n  const {\n    author,\n    quote\n  } = !!state.data && state.data[0]; //esto quiere decir que si hay data \"!!state.data\" entonces \"&&\"\" extrae de state.data[0] author,quote\n  // el operador !! lo que hace es darle valor a null por ejemplo !null \n  //console.log(quote);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Breaking Bad Quotes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-info text-center\",\n      children: \"loading.....\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 22\n    }, this) : /*#__PURE__*/_jsxDEV(\"blockquote\", {\n      className: \"blockquote text-right\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mb-0\",\n        children: quote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n        className: \"blockquote-footer\",\n        children: author\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: increment,\n      children: \"Siguiente quote\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MultipleCustomHooks, \"BNBem0ZrAp+/+l5fDuVxWgc8Jfs=\", false, function () {\n  return [useCounter, useFetch];\n});\n\n_c = MultipleCustomHooks;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultipleCustomHooks\");","map":{"version":3,"sources":["C:/Users/juan.villegas.munoz/OneDrive - Accenture/Desktop/React/05-hook-app/src/components/03-examples/MultipleCustomHooks.js"],"names":["React","useCounter","useFetch","MultipleCustomHooks","counter","increment","state","loading","author","quote","data"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAO,6BAAP;;AAEA,OAAO,MAAMC,mBAAmB,GAAG,MAAM;AAAA;;AAGzC;AACA;AACA;AACA;AACA;AACA;AACA,QAAM;AAACC,IAAAA,OAAD;AAASC,IAAAA;AAAT,MAAsBJ,UAAU,CAAC,CAAD,CAAtC,CATyC,CAUvC;;AACD,QAAMK,KAAK,GAAGJ,QAAQ,CAAG,6CAA4CE,OAAQ,EAAvD,CAAtB,CAXwC,CAaxC;;AACA,QAAM;AAACG,IAAAA;AAAD,MAAYD,KAAlB,CAdwC,CAgBxC;;AAEA,QAAM;AAACE,IAAAA,MAAD;AAAQC,IAAAA;AAAR,MAAiB,CAAC,CAACH,KAAK,CAACI,IAAR,IAAgBJ,KAAK,CAACI,IAAN,CAAW,CAAX,CAAvC,CAlBwC,CAkBa;AACrD;AAGA;;AACC,sBACE;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA;AAAA;AAAA;AAAA,YAFJ,EAOMH,OAAO,gBAAI;AAAK,MAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAJ,gBAIR;AAAY,MAAA,SAAS,EAAC,uBAAtB;AAAA,8BACD;AAAG,QAAA,SAAS,EAAC,MAAb;AAAA,kBAAqBE;AAArB;AAAA;AAAA;AAAA;AAAA,cADC,eAED;AAAA;AAAA;AAAA;AAAA,cAFC,eAGD;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAA,kBAAuCD;AAAvC;AAAA;AAAA;AAAA;AAAA,cAHC;AAAA;AAAA;AAAA;AAAA;AAAA,YAXL,eAqBI;AAAQ,MAAA,SAAS,EAAC,iBAAlB;AAAoC,MAAA,OAAO,EAAEH,SAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YArBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD,CAjDM;;GAAMF,mB;UASeF,U,EAEbC,Q;;;KAXFC,mB","sourcesContent":["import React from 'react';\r\nimport { useCounter } from '../../hook/useCounter';\r\nimport { useFetch } from '../../hook/useFetch';\r\nimport \"../02-useEffect/effects.css\";\r\n\r\nexport const MultipleCustomHooks = () => {\r\n\r\n\r\n/*  vamos a hacer uso de un contador para ir pasando de una frase a otra mediante el \r\n  indicador del id\r\n  mediante el useCounter.\r\n  vamos a desestructurar lo que retorna el useCounter con lo que nos interesa lo que seria en este caso\r\n  el counter y el increment\r\n*/\r\nconst {counter,increment} = useCounter(1);\r\n  //vamos a llamar a nuestro hooks useFetch el cual nos regresa state y lo guardamos en la const state\r\n const state = useFetch( `https://www.breakingbadapi.com/api/quotes/${counter}` );\r\n \r\n //extraemos el loading del state\r\n const {loading} = state;\r\n\r\n //ahora vamos a extraer la data que debemos hacerlo de la siguiente manera debido a que inicialmente data es null\r\n\r\n const {author,quote} = !!state.data && state.data[0];//esto quiere decir que si hay data \"!!state.data\" entonces \"&&\"\" extrae de state.data[0] author,quote\r\n // el operador !! lo que hace es darle valor a null por ejemplo !null \r\n\r\n\r\n //console.log(quote);\r\n  return (\r\n    <div>\r\n        <h1>Breaking Bad Quotes</h1>\r\n        <hr />\r\n\r\n        {/* vamos a usar un ternario en el cual definimos que si loading es true cargue 1 el div loading\r\n        y si es false el blockquote*/}\r\n        {\r\n          loading ? (<div className='alert alert-info text-center'>\r\n          loading.....\r\n        </div>) \r\n        :\r\n        (<blockquote className='blockquote text-right'>\r\n        <p className='mb-0'>{quote}</p>\r\n        <p></p>\r\n        <footer className='blockquote-footer'>{author}</footer>\r\n\r\n      </blockquote>)\r\n        }\r\n \r\n        {/*vamos a crear un boton para pasar a la siguiente frase */}\r\n\r\n        <button className='btn btn-primary' onClick={increment}>Siguiente quote</button>\r\n        \r\n    </div>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}