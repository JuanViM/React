{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react'; //a este hook le va a entrar el url que introducira el usuario\n\nexport const useFetch = url => {\n  _s();\n\n  //vamos a crearle un estato con el use state\n  const [state, setState] = useState({\n    data: null,\n    loading: true,\n    error: null\n  }); //cada vez que cambia el url vamos a recibir un efecto el cual se ejecutara solo cuando el url cambia\n  //ya que lo expecificamos aqui (}, [url]))\n\n  useEffect(() => {\n    //usamos el fetch para manejar las peticiones url y regresa una promesa\n    fetch(url); //de la promesa vamos a extraer la respuesta y la pasamos a json\n\n    console.log(url).then(resp => resp.json()).then(data => {\n      //aqui dentro ya tenemos la data y ahora llamamos al setState y vamos a establecer los cambios\n      //primero el loading en false por que ya termino de cargar\n      //error en null por que si llegamos aqui es que no hubo errores\n      //la data va a ser igual a la data que recibimos del endpoint\n      setState({\n        loading: false,\n        error: null,\n        data\n      });\n    });\n  }, [url]); //ahora vamos a retornar el state que seria {data: null, loading:true,error:null}\n\n  return state;\n};\n\n_s(useFetch, \"ju310fKYfUrQDXVFN/CRlCZTuco=\");","map":{"version":3,"sources":["C:/Users/juan.villegas.munoz/OneDrive - Accenture/Desktop/React/05-hook-app/src/hook/useFetch.js"],"names":["React","useEffect","useState","useFetch","url","state","setState","data","loading","error","fetch","console","log","then","resp","json"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAKC,GAAF,IAAW;AAAA;;AAE/B;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC;AAACK,IAAAA,IAAI,EAAE,IAAP;AAAaC,IAAAA,OAAO,EAAC,IAArB;AAA0BC,IAAAA,KAAK,EAAC;AAAhC,GAAD,CAAlC,CAH+B,CAK/B;AACA;;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd;AACAS,IAAAA,KAAK,CAACN,GAAD,CAAL,CAFc,CAGd;;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYR,GAAZ,EACCS,IADD,CACOC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADf,EAECF,IAFD,CAEON,IAAI,IAAI;AAEb;AACA;AACA;AACA;AACAD,MAAAA,QAAQ,CAAC;AACNE,QAAAA,OAAO,EAAC,KADF;AAENC,QAAAA,KAAK,EAAC,IAFA;AAGNF,QAAAA;AAHM,OAAD,CAAR;AAKD,KAbD;AAeD,GAnBQ,EAmBN,CAACH,GAAD,CAnBM,CAAT,CAR+B,CA4B/B;;AAEA,SAAOC,KAAP;AAIH,CAlCM;;GAAMF,Q","sourcesContent":["import React, { useEffect, useState } from 'react'\r\n\r\n//a este hook le va a entrar el url que introducira el usuario\r\nexport const useFetch = ( url ) => {\r\n \r\n    //vamos a crearle un estato con el use state\r\n    const [state, setState] = useState({data: null, loading:true,error:null});\r\n\r\n    //cada vez que cambia el url vamos a recibir un efecto el cual se ejecutara solo cuando el url cambia\r\n    //ya que lo expecificamos aqui (}, [url]))\r\n\r\n    useEffect(() => {\r\n      //usamos el fetch para manejar las peticiones url y regresa una promesa\r\n      fetch(url)\r\n      //de la promesa vamos a extraer la respuesta y la pasamos a json\r\n      console.log(url)\r\n      .then( resp => resp.json())\r\n      .then (data => {\r\n\r\n        //aqui dentro ya tenemos la data y ahora llamamos al setState y vamos a establecer los cambios\r\n        //primero el loading en false por que ya termino de cargar\r\n        //error en null por que si llegamos aqui es que no hubo errores\r\n        //la data va a ser igual a la data que recibimos del endpoint\r\n        setState({\r\n           loading:false,\r\n           error:null,\r\n           data,\r\n        });\r\n      })\r\n\r\n    }, [url])\r\n    //ahora vamos a retornar el state que seria {data: null, loading:true,error:null}\r\n\r\n    return state;\r\n    \r\n\r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module"}