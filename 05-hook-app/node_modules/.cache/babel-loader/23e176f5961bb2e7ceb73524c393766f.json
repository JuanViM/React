{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react'; //a este hook le va a entrar el url que introducira el usuario\n\nexport const useFetch = url => {\n  _s();\n\n  //nos creamos una nueva variable con el useRef mediante la cual cuando el componente se llama\n  //por primera vez es true por que se esta montando \n  const isMounted = useRef(true); //vamos a crearle un estato con el use state\n\n  const [state, setState] = useState({\n    data: null,\n    loading: true,\n    error: null\n  }); //vamos a meter un useEffect que se cargue solo cuando se carga por primera vez\n\n  useEffect(() => {\n    //cuando este efecto se desmonte cambiaremos el valor mediante el return\n    return () => {\n      isMounted.current = false;\n    };\n  }, []); //cada vez que cambia el url vamos a recibir un efecto el cual se ejecutara solo cuando el url cambia\n  //ya que lo expecificamos aqui (}, [url]))\n\n  useEffect(() => {\n    //podemos tambien resetear los valores del data y el loading a true para mostrar la barra de carga\n    //llamando al setState y pasandole estos valores, una vez encuentre la url en la epticion fetch se cambiara automaticamente\n    setState({\n      data: null,\n      loading: true,\n      error: null\n    }); //usamos el fetch para manejar las peticiones url y regresa una promesa\n\n    fetch(url) //de la promesa vamos a extraer la respuesta y la pasamos a json\n    .then(resp => resp.json()).then(data => {\n      //aqui dentro ya tenemos la data y ahora llamamos al setState y vamos a establecer los cambios\n      //primero el loading en false por que ya termino de cargar\n      //error en null por que si llegamos aqui es que no hubo errores\n      //la data va a ser igual a la data que recibimos del endpoint\n      //vamos a hacer mas lento el setstate mediante un time out\n      setTimeout(() => {\n        if (isMounted.current) {\n          setState({\n            loading: false,\n            error: null,\n            data\n          });\n        }\n      }, 4000);\n    });\n  }, [url]); //ahora vamos a retornar el state que seria {data: null, loading:true,error:null}\n\n  return state;\n};\n\n_s(useFetch, \"v2LC2DX7tIepz0t6e7Ukq/UjMlc=\");","map":{"version":3,"sources":["C:/Users/juan.villegas.munoz/OneDrive - Accenture/Desktop/React/05-hook-app/src/hook/useFetch.js"],"names":["React","useEffect","useRef","useState","useFetch","url","isMounted","state","setState","data","loading","error","current","fetch","then","resp","json","setTimeout"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AAE7B;AACA;AACA,QAAMC,SAAS,GAAGJ,MAAM,CAAC,IAAD,CAAxB,CAJ6B,CAK7B;;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC;AAAEM,IAAAA,IAAI,EAAE,IAAR;AAAcC,IAAAA,OAAO,EAAE,IAAvB;AAA6BC,IAAAA,KAAK,EAAE;AAApC,GAAD,CAAlC,CAN6B,CAQ7B;;AACAV,EAAAA,SAAS,CAAC,MAAM;AAEZ;AACA,WAAO,MAAM;AACTK,MAAAA,SAAS,CAACM,OAAV,GAAoB,KAApB;AACH,KAFD;AAIH,GAPQ,EAON,EAPM,CAAT,CAT6B,CAmB7B;AACA;;AAEAX,EAAAA,SAAS,CAAC,MAAM;AAEZ;AACA;AACAO,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE,IAAR;AAAcC,MAAAA,OAAO,EAAE,IAAvB;AAA6BC,MAAAA,KAAK,EAAE;AAApC,KAAD,CAAR,CAJY,CAKZ;;AACAE,IAAAA,KAAK,CAACR,GAAD,CAAL,CACI;AADJ,KAGKS,IAHL,CAGUC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAHlB,EAKKF,IALL,CAKUL,IAAI,IAAI;AAEV;AACA;AACA;AACA;AAEA;AACAQ,MAAAA,UAAU,CAAC,MAAM;AAEb,YAAGX,SAAS,CAACM,OAAb,EAAqB;AACjBJ,UAAAA,QAAQ,CAAC;AACLE,YAAAA,OAAO,EAAE,KADJ;AAELC,YAAAA,KAAK,EAAE,IAFF;AAGLF,YAAAA;AAHK,WAAD,CAAR;AAKH;AAEJ,OAVS,EAUP,IAVO,CAAV;AAYH,KAzBL;AA2BH,GAjCQ,EAiCN,CAACJ,GAAD,CAjCM,CAAT,CAtB6B,CAwD7B;;AAEA,SAAOE,KAAP;AAIH,CA9DM;;GAAMH,Q","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\r\n\r\n//a este hook le va a entrar el url que introducira el usuario\r\nexport const useFetch = (url) => {\r\n\r\n    //nos creamos una nueva variable con el useRef mediante la cual cuando el componente se llama\r\n    //por primera vez es true por que se esta montando \r\n    const isMounted = useRef(true);\r\n    //vamos a crearle un estato con el use state\r\n    const [state, setState] = useState({ data: null, loading: true, error: null });\r\n\r\n    //vamos a meter un useEffect que se cargue solo cuando se carga por primera vez\r\n    useEffect(() => {\r\n      \r\n        //cuando este efecto se desmonte cambiaremos el valor mediante el return\r\n        return () => {\r\n            isMounted.current = false;\r\n        }\r\n      \r\n    }, [])\r\n    \r\n\r\n    //cada vez que cambia el url vamos a recibir un efecto el cual se ejecutara solo cuando el url cambia\r\n    //ya que lo expecificamos aqui (}, [url]))\r\n\r\n    useEffect(() => {\r\n\r\n        //podemos tambien resetear los valores del data y el loading a true para mostrar la barra de carga\r\n        //llamando al setState y pasandole estos valores, una vez encuentre la url en la epticion fetch se cambiara automaticamente\r\n        setState({ data: null, loading: true, error: null });\r\n        //usamos el fetch para manejar las peticiones url y regresa una promesa\r\n        fetch(url)\r\n            //de la promesa vamos a extraer la respuesta y la pasamos a json\r\n\r\n            .then(resp => resp.json())\r\n\r\n            .then(data => {\r\n\r\n                //aqui dentro ya tenemos la data y ahora llamamos al setState y vamos a establecer los cambios\r\n                //primero el loading en false por que ya termino de cargar\r\n                //error en null por que si llegamos aqui es que no hubo errores\r\n                //la data va a ser igual a la data que recibimos del endpoint\r\n\r\n                //vamos a hacer mas lento el setstate mediante un time out\r\n                setTimeout(() => {\r\n\r\n                    if(isMounted.current){\r\n                        setState({\r\n                            loading: false,\r\n                            error: null,\r\n                            data,\r\n                        });\r\n                    }\r\n                    \r\n                }, 4000);\r\n                \r\n            })\r\n\r\n    }, [url])\r\n    //ahora vamos a retornar el state que seria {data: null, loading:true,error:null}\r\n\r\n    return state;\r\n\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}